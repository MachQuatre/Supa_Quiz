server {
  listen 80;
  server_name _;

  client_max_body_size 50m;

  root /usr/share/nginx/html;
  index index.html;

  # Upstreams (noms = services docker compose)
  set $node http://node_backend:3001;
  set $go   http://go_admin:8080;
  set $ai   http://ai_service:5001;

  # --- Admin Go: assets + pages ---
  location ^~ /(static|favicon\.ico)$ {
    proxy_pass $go;
    include /etc/nginx/proxy_params;
  }

  location ^~ /admin/ {
    rewrite ^/admin/(.*)$ /$1 break;
    proxy_pass $go;
    include /etc/nginx/proxy_params;
  }

  # Actions admin groupées (POST exacts)
  location ~ ^/(promote-user|demote-user)$ {
    proxy_pass http://go_admin:8080;
    include /etc/nginx/proxy_params;
  }

  # Redirections POST racine -> /admin/... (préserve le verbe avec 307)
  location ~ ^/(login|logout|whoami)$ { return 307 /admin/$1; }

  # --- API Node ---
  location ^~ /api/ {
    proxy_pass $node;
    include /etc/nginx/proxy_params;
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
      return 204;
    }
  }

  # --- WebSocket (Socket.IO) ---
  location ^~ /socket.io/ {
    proxy_pass $node/socket.io;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    include /etc/nginx/proxy_params;
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_buffering off;
  }

  # --- Service IA (Flask) ---
  location ^~ /ai/ {
    rewrite ^/ai/(.*)$ /$1 break;
    proxy_pass $ai;
    include /etc/nginx/proxy_params;
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
      return 204;
    }
  }

  # --- Cache maîtrisé (groupé) ---
  location ~ ^/(index\.html|flutter_service_worker\.js|manifest\.json|main\.dart\.js|assets/(AssetManifest\.json|FontManifest\.json|NOTICES))$ {
    add_header Cache-Control "no-store";
    try_files $uri =404;
  }

  # Assets front
  location ~* \.(png|jpg|jpeg|gif|svg|ico|woff2?|ttf)$ {
    expires 7d;
    add_header Cache-Control "public";
    try_files $uri =404;
  }

  # --- Fallback SPA ---
  location / { try_files $uri $uri/ /index.html; }
}