version: "3.9"

services:
  mongo:
    image: mongo:7
    container_name: quiz_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: quiz_app
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: quiz_ai
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      # Connexion Mongo (via le nom de service "mongo")
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB: quiz_app
      HOST: 0.0.0.0
      PORT: 5001
      ANALYSIS_WINDOW_DAYS: 7
    ports:
      - "5001:5001"

  # Lance le script de seed une fois puis s'arrête
  mongo_seed:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: quiz_seed
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB: quiz_app
    command: ["python", "seed/seed_mongo.py"]
    restart: "no"

  node_backend:
    build:
      context: ./backend/nodejs/supa_quiz_server
      dockerfile: Dockerfile
    container_name: quiz_api
    restart: unless-stopped
    depends_on:
      ai_service:
        condition: service_started
      mongo:
        condition: service_healthy
    environment:
      # URL interne du microservice IA
      PY_AI_URL: http://ai_service:5001
      # Chaîne Mongo (si ton backend l'utilise)
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB: quiz_app
      NODE_ENV: development
      PORT: 3001
    ports:
      - "3001:3001"
    # Si tu as un script start:dev qui regarde PORT
    command: ["npm", "run", "start"]

  ai_train:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: quiz_ai_train
    depends_on:
      mongo:
        condition: service_healthy
      mongo_seed:
        condition: service_completed_successfully
    environment:
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB: quiz_app
      MODEL_DIR: model
      DKT_EPOCHS: 6
    command: ["python", "train_dkt.py"]
    restart: "no"

  quiz-hadoop-master:
    image: liliasfaxi/spark-hadoop:hv-2.7.2
    container_name: quiz-hadoop-master
    hostname: quiz-hadoop-master
    command: >
      sh -lc "service ssh start &&
              [ -d /hadoop/dfs/name/current ] || hdfs namenode -format -force &&
              /usr/local/hadoop/sbin/start-dfs.sh &&
              /usr/local/hadoop/sbin/start-yarn.sh &&
              tail -f /dev/null"
    volumes:
      - nn_data:/hadoop/dfs/name
      - ./hadoop/config/core-site.xml:/usr/local/hadoop/etc/hadoop/core-site.xml:ro
      - ./hadoop/config/hdfs-site.xml:/usr/local/hadoop/etc/hadoop/hdfs-site.xml:ro
      - ./hadoop/config/yarn-site.xml:/usr/local/hadoop/etc/hadoop/yarn-site.xml:ro
      - ./hadoop/config/mapred-site.xml:/usr/local/hadoop/etc/hadoop/mapred-site.xml:ro
      - ./hadoop/config/slaves:/usr/local/hadoop/etc/hadoop/slaves:ro
      - ./hadoop/jars:/opt/jars                 # artefacts (ndjson, tsv, etc.)
      - ./hadoop/streaming:/opt/streaming:ro    # scripts mapper/reducer
    ports:
      - "51071:50070"
      - "8088:8088"
    healthcheck:
      test: ["CMD-SHELL", "hdfs dfs -ls / >/dev/null 2>&1 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 20


  quiz-hadoop-dn1:
    image: liliasfaxi/spark-hadoop:hv-2.7.2
    container_name: quiz-hadoop-dn1
    hostname: quiz-hadoop-dn1
    command: >
      sh -lc "service ssh start &&
              /usr/local/hadoop/sbin/hadoop-daemon.sh start datanode &&
              /usr/local/hadoop/sbin/yarn-daemon.sh start nodemanager &&
              tail -f /dev/null"
    volumes:
      - dn1_data:/hadoop/dfs/data
      - ./hadoop/config/core-site.xml:/usr/local/hadoop/etc/hadoop/core-site.xml:ro
      - ./hadoop/config/hdfs-site.xml:/usr/local/hadoop/etc/hadoop/hdfs-site.xml:ro
      - ./hadoop/config/yarn-site.xml:/usr/local/hadoop/etc/hadoop/yarn-site.xml:ro
      - ./hadoop/config/mapred-site.xml:/usr/local/hadoop/etc/hadoop/mapred-site.xml:ro

# quiz-hadoop-dn2
  quiz-hadoop-dn2:
    image: liliasfaxi/spark-hadoop:hv-2.7.2
    container_name: quiz-hadoop-dn2
    hostname: quiz-hadoop-dn2
    command: >
      sh -lc "service ssh start &&
              /usr/local/hadoop/sbin/hadoop-daemon.sh start datanode &&
              /usr/local/hadoop/sbin/yarn-daemon.sh start nodemanager &&
              tail -f /dev/null"
    volumes:
      - dn2_data:/hadoop/dfs/data
      - ./hadoop/config/core-site.xml:/usr/local/hadoop/etc/hadoop/core-site.xml:ro
      - ./hadoop/config/hdfs-site.xml:/usr/local/hadoop/etc/hadoop/hdfs-site.xml:ro
      - ./hadoop/config/yarn-site.xml:/usr/local/hadoop/etc/hadoop/yarn-site.xml:ro
      - ./hadoop/config/mapred-site.xml:/usr/local/hadoop/etc/hadoop/mapred-site.xml:ro


volumes:
  mongo_data:
  nn_data:
  dn1_data:
  dn2_data:
